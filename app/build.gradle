ext {
    ci = System.getenv('CI') == 'true'
}

apply plugin: 'com.android.application'

apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    runOnEachPackage = ci
}

apply from: "${project.rootDir}/tools/git-version.gradle"

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        applicationId 'com.simonlebras.radiofrance'
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        resConfigs 'fr'
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        cruncherEnabled = false
    }

    dexOptions {
        preDexLibraries !ci
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('signing/debug.jks')
            storePassword 'radiofrance'
            keyAlias 'debugkey'
            keyPassword 'radiofrance'
        }

        release {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))

            storeFile rootProject.file('signing/release.jks')
            storePassword keystoreProperties['releaseStorePassword']
            keyAlias 'releasekey'
            keyPassword keystoreProperties['releaseKeyPassword']
        }
    }

    flavorDimensions 'environment'
    productFlavors {
        prod {
            dimension 'environment'
        }

        dev {
            dimension 'environment'
            versionCode gitVersionCodeTime
            resConfigs 'xhdpi'
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            manifestPlaceholders = [crashlyticsEnabled: false]
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }

        release {
            manifestPlaceholders = [crashlyticsEnabled: true]
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation Dependencies.kotlinStdlib

    implementation Dependencies.appcompat
    implementation Dependencies.recyclerview
    implementation Dependencies.cardview
    implementation Dependencies.coordinatorlayout
    implementation Dependencies.design
    implementation Dependencies.mediarouter

    implementation Dependencies.constraintLayout

    implementation Dependencies.lifecycle
    implementation Dependencies.lifecycleJava8

    implementation Dependencies.playServicesCastFramework

    implementation Dependencies.firebaseCore
    implementation Dependencies.firebaseFirestore
    implementation Dependencies.firebasePerf

    implementation Dependencies.dagger
    kapt Dependencies.daggerCompiler
    implementation Dependencies.daggerAndroidSupport
    kapt Dependencies.daggerAndroidProcessor

    implementation Dependencies.rxjava
    implementation Dependencies.rxandroid
    implementation Dependencies.rxkotlin
    implementation Dependencies.rxbindingKotlin
    implementation Dependencies.rxbindingAppcompatKotlin

    implementation Dependencies.okhttp

    implementation(Dependencies.glide) {
        exclude group: "com.android.support"
    }
    kapt Dependencies.glideCompiler
    implementation Dependencies.glideOkhttp
    implementation(Dependencies.glideRecyclerview) {
        transitive = false
    }

    implementation Dependencies.exoplayerCore

    implementation Dependencies.timber

    debugImplementation Dependencies.leakcanary
    releaseImplementation Dependencies.leakcanaryNoOp

    debugImplementation Dependencies.rxlint

    implementation Dependencies.crashlytics
}

apply plugin: 'com.google.gms.google-services'
